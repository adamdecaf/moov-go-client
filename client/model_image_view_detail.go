/*
 * Moov API
 *
 * _Note_: We're currently in pre-release of our API. We expect breaking changes before launching v1 so please join our [slack organization](http://moov-io.slack.com/) ([request an invite](https://join.slack.com/t/moov-io/shared_invite/enQtNDE5NzIwNTYxODEwLTRkYTcyZDI5ZTlkZWRjMzlhMWVhMGZlOTZiOTk4MmM3MmRhZDY4OTJiMDVjOTE2MGEyNWYzYzY1MGMyMThiZjg)) or [mailing list](https://groups.google.com/forum/#!forum/moov-users) for more updates and notices.  The Moov API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable, resource-oriented URLs, and uses HTTP response codes to indicate API errors. We use built-in HTTP features, like HTTP authentication and HTTP verbs, which are understood by off-the-shelf HTTP clients. We support [cross-origin resource sharing](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing), allowing you to interact securely with our API from client-side web applications (never expose your secret API key in any public website's client-side code). [JSON](http://www.json.org/) is returned by all API responses, including errors, although you can generate client code via [OpenAPI code generation](https://github.com/OpenAPITools/openapi-generator) or the [OpenAPI editor](https://editor.swagger.io/) to convert responses to appropriate language-specific objects.  The Moov API offers two methods of authentication, Cookie and OAuth2 access tokens. The cookie auth is designed for web browsers while the OAuth2 authentication is designed for automated access of our API.  When an API requires a token generated using OAuth (2-legged), no end user is involved. You generate the token by passing your client credentials (Client ID and Client Secret) in a simple call to Create access token (`/oauth2/token`). The operation returns a token that is valid for a few hours and can be renewed; when it expires, you just repeat the call and get a new token. Making additional token requests will keep generating tokens. There are no hard or soft limits.  Cookie auth is setup by provided (`/users/login`) a valid email and password combination. A `Set-Cookie` header is returned on success, which can be used in later calls. Cookie auth is required to generate OAuth2 client credentials.  The following order of API operations is suggested to start developing against the Moov API:  1. [Create a Moov API user](#operation/createUser) with a unique email address 1. [Login with user/password credentials](#operation/userLogin) 1. [Create an OAuth2 client](#operation/createOAuth2Client) and [Generate an OAuth access token](#operation/createOAuth2Token) 1. Using the OAuth credentials create:    - [Originator](#operation/addOriginator) and [Originator Depository](#operation/addDepository) (requires micro deposit setup)    - [Receiver](#operation/addReceivers) and [Receiver Depository](#operation/addDepository) (requires micro deposit setup) 1. [Submit the Transfer](#operation/addTransfer)  After signup clients can [submit ACH files](#operation/addFile) (either in JSON or plaintext) for [validation](#operation/validateFile) and [tabulation](#operation/getFileContents).  The Moov API offers many services: - Automated Clearing House (ACH) origination and file management - Transfers and ACH Receiver management. - X9 / Image Cash Ledger (ICL) specification support (image uplaod)  ACH is implemented a RESTful API enabling ACH transactions to be submitted and received without a deep understanding of a full NACHA file specification.  An Originator can initiate a Transfer as either a push (credit) or pull (debit) to a Receiver. Originators and Receivers must have a valid Depository account for a Transfer. A Transfer is initiated by an Originator to a Receiver with an amount and flow of funds. ``` Originator                 ->   Gateway   ->   Receiver  - OriginatorDepository                         - ReceiverDepository  - Type   (Push or Pull)  - Amount (USD 12.43)  - Status (Pending)  ```  If you find a security related problem please contact us at [`security@moov.io`](mailto:security@moov.io).
 *
 * API version: v1
 * Contact: security@moov.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

// ImageViewDetail struct for ImageViewDetail
type ImageViewDetail struct {
	// ImageViewDetail ID
	ID string `json:"ID,omitempty"`
	// ImageIndicator is a code that indicates the presence and disposition of an image view conveyed in the related ImageViewData.  When an image view is not present (0) then certain conditional fields in this ImageViewDetail and the related ImageViewData shall not be present and will be filled with blank space.  * `0` - Image view not present * `1` - Image view present, actual check * `2` - Image view present, not actual check * `3` - Image view present, unable to determine if value is 1 or 2
	ImageIndicator int32 `json:"imageIndicator,omitempty"`
	// ImageCreatorRoutingNumber identifies the financial institution that created the image view.
	ImageCreatorRoutingNumber string `json:"imageCreatorRoutingNumber,omitempty"`
	// ImageCreatorDate is the date assigned by the image creator for the image view conveyed in the related ImageData.
	ImageCreatorDate time.Time `json:"imageCreatorDate,omitempty"`
	// ImageViewFormatIndicator is a code that identifies the type of image format used in the related ImageViewData.ImageData. The image format type is also commonly specified by reference to the file extension used when image data is saved as an image file.  Agreement not required: * `00` - TIFF 6; Extension: TIF Agreement required: * `01` - IOCA FS 11; Extension: ICA * `20` - PNG (Portable Network Graphics); Extension: PNG ‘21’JFIF (JPEG File Interchange Format); Extension: JPG * `22` - SPIFF (Still Picture Interchange File Format) (ITU-T Rec. T.84 Annex F); Extension: SPF * `23` - JBIG data stream (ITU-T Rec. T.82/ISO/IEC 11544:1993); Extension: JBG ‘24’JPEG 2000 (ISO/IEC 15444-1:2000); Extension: JP2
	ImageViewFormatIndicator string `json:"imageViewFormatIndicator,omitempty"`
	// ImageViewCompressionAlgorithm is a code that identifies the algorithm or method used to compress the Image Data in the related ImageViewData.ImageData.  Agreement not required: * `00` - Group 4 facsimile compression (ITU-T Rec. T.563/CCITT Rec. T.6) Agreement required: * `01` - JPEG Baseline (JPEG Interchange Format) (ITU-T Rec. T.81/ISO/IEC 10918) * `02` - ABIC * `21` - PNG (Portable Network Graphics) * `22` - JBIG (ITU-T Rec. T.82/ISO/IEC 11544:1993) * `23` - JPEG 2000 (ISO/IEC 15444–1:2000)
	ImageViewCompressionAlgorithm string `json:"imageViewCompressionAlgorithm,omitempty"`
	// ViewSideIndicator is a code that indicates the image view conveyed in the related ImageViewData. An image view may be a full view of the item (i.e., the entire full face of the document) or may be a partial view (snippet) as determined by viewDescriptor.  * `0` - Front image view * `1` - Rear image view
	ViewSideIndicator string `json:"viewSideIndicator,omitempty"`
	// ViewDescriptor is a code that indicates the nature of the image view based on ImageViewData.ImageData.  * `00` -  Full view * `01` -  Partial view–unspecified Area of Interest * `02` -  Partial view–date Area of Interest * `03` -  Partial view–payee Area of Interest * `04` -  Partial view–convenience amount Area of Interest * `05` -  Partial view–amount in words (legal amount) Area of Interest * `06` -  Partial view–signature Area(s) of Interest * `07` -  Partial view–payor name and address Area of Interest * `08` -  Partial view–MICR line Area of Interest * `09` -  Partial view–memo line Area of Interest * `10` -  Partial view–payor bank name and address Area of Interest * `11` -  Partial view–payee endorsement Area of Interest * `12` -  Partial view–Bank Of First Deposit (BOFD) endorsement Area of Interest * `13` -  Partial view–transit endorsement Area of Interest * `14 - 99` -  Reserved for X9
	ViewDescriptor string `json:"viewDescriptor,omitempty"`
	// DigitalSignatureIndicator is a code that indicates the presence or absence of a digital signature for the image view contained in ImageViewData.ImageData. If present, the Digital Signature is conveyed in the related DigitalSignature.  * `0` - Digital Signature is not present * `1` - Digital Signature is present
	DigitalSignatureIndicator string `json:"digitalSignatureIndicator,omitempty"`
	// DigitalSignatureMethod is a code that identifies the cryptographic algorithm used to generate and validate the Digital Signature in ImageViewData.DigitalSignature. * `00` - Digital Signature Algorithm (DSA) with SHA1 (ANSI X9.30) * `01` - RSA with MD5 (ANSI X9.31) * `02` - RSA with MDC2 (ANSI X9.31) * `03` - RSA with SHA1 (ANSI X9.31) * `04` - Elliptic Curve DSA (ECDSA) with SHA1 (ANSI X9.62) * `05 - 99` - Reserved for emerging cryptographic algorithms.
	DigitalSignatureMethod string `json:"digitalSignatureMethod,omitempty"`
	// SecurityKeySize is the length in bits of the cryptographic algorithm key used to create the Digital Signature. Valid values 0–99999
	SecurityKeySize int32 `json:"securityKeySize,omitempty"`
	// ProtectedDataStart is a number that represents the offset in bytes from the first byte (counted as byte 1) of the image data in ImageViewData.ImageData to the first byte of the image data protected by the digital signature. Valid values - 0000000 - Digital Signature is applied to entire image data 000001–9999999 - Valid offset values
	ProtectedDataStart int32 `json:"protectedDataStart,omitempty"`
	// ProtectedDataLength is number of contiguous bytes of image data in the related ImageViewData.ImageData protected by the digital signature starting with the byte indicated by the value of the ProtectedDataStart in this ImageViewDetail. The ProtectedDataLength value shall not exceed the ImageViewData.ImageDataLength. Valid values - 0000000 - Digital Signature is applied to entire image data 000001–9999999 - Valid length values
	ProtectedDataLength int32 `json:"protectedDataLength,omitempty"`
	// ImageRecreateIndicator is a code that indicates whether the sender has the ability to recreate the image view conveyed in the related ImageViewData.ImageData.  * `0` - Sender can recreate the image view for the duration of the agreed upon retention time frames. * `1` - Sender cannot recreate image view.
	ImageRecreateIndicator int32 `json:"imageRecreateIndicator,omitempty"`
	// UserField identifies a field used at the discretion of users of the standard.
	UserField string `json:"userField,omitempty"`
	// OverrideIndicator is a code that indicates to a receiving exchange partner that this image view has a detected image test failure that cannot be corrected and that this view shall be accepted regardless of any image test failures.  * ` ` -  blank/space indicates no observed image test failure present * `0` -  No override information for this view or not applicable * `1` -  Imperfect image * `A` -  IQA Fail–Image view reviewed and deemed usable—no alternate format * `B` -  IQA Fail–Image view reviewed and deemed usable—alternate format included in this file * `C` -  IQA Fail–Image view reviewed and deemed usable–alternate format included in this file and original document available * `D` -  IQA Fail–Image view reviewed and deemed usable–alternate format available * `E` -  IQA Fail–Image view reviewed and deemed usable–original document available * `F` -  IQA Fail–Image view reviewed and deemed usable–original document and alternate format available * `G` -  IQA Fail–Image view reviewed and deemed unusable–no alternate format * `H` -  IQA Fail–Image view reviewed and deemed unusable–alternate format included in this file * `I` -  IQA Fail–Image view reviewed and deemed unusable–alternate format included in this file and original document available * `J` -  IQA Fail–Image view reviewed and deemed unusable–alternate format available * `K` -  IQA Fail–Image view reviewed and deemed unusable–original document available * `L` -  IQA Fail–Image view reviewed and deemed unusable–original document and alternate format available * `M` -  IQA Fail–Image view not reviewed–no alternate format * `N` -  IQA Fail–Image view not reviewed–alternate format included in this file * `O` -  IQA Fail–Image view not reviewed–alternate format included in this file and original
	OverrideIndicator string `json:"overrideIndicator,omitempty"`
}

/*
 * Moov API
 *
 * _Note_: We're currently in pre-release of our API. We expect breaking changes before launching v1 so please join our [slack organization](http://moov-io.slack.com/) ([request an invite](https://join.slack.com/t/moov-io/shared_invite/enQtNDE5NzIwNTYxODEwLTRkYTcyZDI5ZTlkZWRjMzlhMWVhMGZlOTZiOTk4MmM3MmRhZDY4OTJiMDVjOTE2MGEyNWYzYzY1MGMyMThiZjg)) or [mailing list](https://groups.google.com/forum/#!forum/moov-users) for more updates and notices.  The Moov API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable, resource-oriented URLs, and uses HTTP response codes to indicate API errors. We use built-in HTTP features, like HTTP authentication and HTTP verbs, which are understood by off-the-shelf HTTP clients. We support [cross-origin resource sharing](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing), allowing you to interact securely with our API from client-side web applications (never expose your secret API key in any public website's client-side code). [JSON](http://www.json.org/) is returned by all API responses, including errors, although you can generate client code via [OpenAPI code generation](https://github.com/OpenAPITools/openapi-generator) or the [OpenAPI editor](https://editor.swagger.io/) to convert responses to appropriate language-specific objects.  The Moov API offers two methods of authentication, Cookie and OAuth2 access tokens. The cookie auth is designed for web browsers while the OAuth2 authentication is designed for automated access of our API.  When an API requires a token generated using OAuth (2-legged), no end user is involved. You generate the token by passing your client credentials (Client ID and Client Secret) in a simple call to Create access token (`/oauth2/token`). The operation returns a token that is valid for a few hours and can be renewed; when it expires, you just repeat the call and get a new token. Making additional token requests will keep generating tokens. There are no hard or soft limits.  Cookie auth is setup by provided (`/users/login`) a valid email and password combination. A `Set-Cookie` header is returned on success, which can be used in later calls. Cookie auth is required to generate OAuth2 client credentials.  The following order of API operations is suggested to start developing against the Moov API:  1. [Create a Moov API user](#operation/createUser) with a unique email address 1. [Login with user/password credentials](#operation/userLogin) 1. [Create an OAuth2 client](#operation/createOAuth2Client) and [Generate an OAuth access token](#operation/createOAuth2Token) 1. Using the OAuth credentials create:    - [Originator](#operation/addOriginator) and [Originator Depository](#operation/addDepository) (requires micro deposit setup)    - [Receiver](#operation/addReceivers) and [Receiver Depository](#operation/addDepository) (requires micro deposit setup) 1. [Submit the Transfer](#operation/addTransfer)  After signup clients can [submit ACH files](#operation/addFile) (either in JSON or plaintext) for [validation](#operation/validateFile) and [tabulation](#operation/getFileContents).  The Moov API offers many services: - Automated Clearing House (ACH) origination and file management - Transfers and ACH Receiver management. - X9 / Image Cash Ledger (ICL) specification support (image uplaod)  ACH is implemented a RESTful API enabling ACH transactions to be submitted and received without a deep understanding of a full NACHA file specification.  An Originator can initiate a Transfer as either a push (credit) or pull (debit) to a Receiver. Originators and Receivers must have a valid Depository account for a Transfer. A Transfer is initiated by an Originator to a Receiver with an amount and flow of funds. ``` Originator                 ->   Gateway   ->   Receiver  - OriginatorDepository                         - ReceiverDepository  - Type   (Push or Pull)  - Amount (USD 12.43)  - Status (Pending)  ```  If you find a security related problem please contact us at [`security@moov.io`](mailto:security@moov.io).
 *
 * API version: v1
 * Contact: security@moov.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// ImageViewAnalysis struct for ImageViewAnalysis
type ImageViewAnalysis struct {
	// ImageViewAnalysis ID
	ID string `json:"ID,omitempty"`
	// GlobalImageQuality is a code that indicates whether the image view was tested for any of the conditions related to image quality defined in the Image Quality Information.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	GlobalImageQuality string `json:"globalImageQuality,omitempty"`
	// GlobalImageUsability is a code that indicates whether the image view was tested for any of the conditions related to image usability defined in the Image Usability Information.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	GlobalImageUsability string `json:"globalImageUsability,omitempty"`
	// ImagingBankSpecificTest designates the capture institution may be able to perform specific tests that can indicate a potentially problematic image view caused by conditions other than those listed in the Image Quality and Image Usability Information fields. By mutual agreement, clearing partners can use the UserField to report the presence or absence of additional image conditions found through tests that are particular to the specific imaging institution. The meaning and interpretation of the User Field data must be understood and agreed upon between participants.   * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	ImagingBankSpecificTest string `json:"imagingBankSpecificTest,omitempty"`
	// PartialImage is a code that indicates if only a portion of the image view is represented digitally while the other portion is suspected to be missing or corrupt.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	PartialImage string `json:"partialImage,omitempty"`
	// ExcessiveImageSkew is a code that indicates if the image view skew exceeds an acceptable value. This value is specific to the imaging institution’s own defined requirements and/or constraints.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	ExcessiveImageSkew string `json:"excessiveImageSkew,omitempty"`
	// PiggybackImage is a code that indicates if a “piggyback” condition has been detected. With a “piggyback” condition, the intended image view may be extended, obscured, or replaced by image(s) of additional document(s). A piggyback occurs when two or more documents are fed together and captured as one document when only a single document should have been fed and captured.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	PiggybackImage string `json:"piggybackImage,omitempty"`
	// TooLightOrTooDark is a code that indicates if the image view is too light or too dark. The value is specific to the imaging institution’s own defined requirements and/or constraints.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	TooLightOrTooDark string `json:"tooLightOrTooDark,omitempty"`
	// StreaksAndOrBands is a A code that indicates if the image view is likely corrupted due to streaks and/or bands. Streaks and bands can be caused by such problems as dirt, dust, ink, or debris on a lens or in the optical path, and failures in the imaging equipment scanner.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	StreaksAndOrBands string `json:"streaksAndOrBands,omitempty"`
	// BelowMinimumImageSize is a code that indicates if the size of the compressed image view is below an acceptable value. The value is specific to the imaging institution’s own defined requirements and/or constraints.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	BelowMinimumImageSize string `json:"belowMinimumImageSize,omitempty"`
	// ExceedsMaximumImageSize is a code that indicates if the size of the compressed image view is above an acceptable value. The value is specific to the imaging institution’s own defined requirements and/or constraints.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	ExceedsMaximumImageSize string `json:"exceedsMaximumImageSize,omitempty"`
	// ImageEnabledPOD is a code that indicates if the image view was used within an image-enabled POD (Proof of Deposit) application.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	ImageEnabledPOD string `json:"imageEnabledPOD,omitempty"`
	// SourceDocumentBad is a code that indicates if it is possible to obtain a better image from the source document when it is known that the current image of the document is unusable.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	SourceDocumentBad string `json:"sourceDocumentBad,omitempty"`
	// DateUsability is a code that indicates if the date Area of Interest is usable and readable from the image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging institution's own defined requirements and/or constraint  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	DateUsability string `json:"dateUsability,omitempty"`
	// PayeeUsability is a code that indicates if the payee name Area of Interest is usable and readable from the image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging institution's own defined requirements and/or constraints.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	PayeeUsability string `json:"payeeUsability,omitempty"`
	// AmountInWordsUsability is a code that indicates if the amount in words (legal amount) Area of Interest is usable and readable from the image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging institution's own defined requirements and/or constraints.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	ConvenienceAmountUsability string `json:"convenienceAmountUsability,omitempty"`
	// SignatureUsability is a code that indicates if the signature Area of Interest is usable and readable from the image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging institution's own defined requirements and/or constraints.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	AmountInWordsUsability string `json:"amountInWordsUsability,omitempty"`
	//  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	SignatureUsability string `json:"signatureUsability,omitempty"`
	// PayorNameAddressUsability is a code that indicates if the payor name and address Area of Interest is usable and readable from the image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging institution's own defined requirements and/or constraints.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	PayorNameAddressUsability string `json:"payorNameAddressUsability,omitempty"`
	// MICRLineUsability is a code that indicates if the MICR line Area of Interest is usable and readable from the image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging institution's own defined requirements and/or constraints.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	MICRLineUsability string `json:"mICRLineUsability,omitempty"`
	// MemoLineUsability is code that indicates if the memo line Area of Interest is usable and readable from the image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging institution's own defined requirements and/or constraints. * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	MemoLineUsability string `json:"memoLineUsability,omitempty"`
	// PayorBankNameAddressUsability is a code that indicates if the payor bank name and address Area of Interest is usable and readable from the image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging institution's own defined requirements and/or constraints.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	PayorBankNameAddressUsability string `json:"payorBankNameAddressUsability,omitempty"`
	// PayeeEndorsementUsability is a code that indicates if the payee endorsement Area of Interest is usable and readable from the image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging institution's own defined requirements and/or constraints.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	PayeeEndorsementUsability string `json:"payeeEndorsementUsability,omitempty"`
	// BOFDEndorsementUsability is a code that indicates if the Bank of First Deposit (BOFD) endorsement Area of Interest is usable and readable from the image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging institution's own defined requirements and/or constraints.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	BOFDEndorsementUsability string `json:"bOFDEndorsementUsability,omitempty"`
	// TransitEndorsementUsability is a code that indicates if the transit endorsement Area of Interest is usable and readable from the image. The definition of the Area of Interest for image usability testing purposes is specific to the imaging institution's own defined requirements and/or constraints.  * `0` -  The image was not tested for any of the image quality conditions * `1` -  The image was tested and one or more image quality conditions were reported * `2` -  The image was tested and no image quality conditions were reported
	TransitEndorsementUsability string `json:"transitEndorsementUsability,omitempty"`
	// UserField identifies a field used at the discretion of users of the standard.
	UserField string `json:"userField,omitempty"`
}
